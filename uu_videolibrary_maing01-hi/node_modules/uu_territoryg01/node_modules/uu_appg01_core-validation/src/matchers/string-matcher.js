const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _String extends Matcher {
  constructor(...params) {
    super("string");
    this.params = params;
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let arg = this.params;

    if (!this._validate(value)) {
      this.result.addInvalidTypeError("string.e001", "The value must be string.");
    } else {
      let isValid = true;
      try {
        new RegExp(arg[0]);
      } catch (e) {
        isValid = false;
      }

      if (isValid && !(typeof arg[0] === "number" || arg[0] instanceof Number || arg[0] == null)) {
        // reg expressin

        if (value.match(arg[0])) {
          // valid reg expressin
        } else {
          // invalid reg expressin

          this.result.addInvalidValueError("string.e004", `The value must match the regular expression (${arg[0]}).`);
        }
      } else {
        if (!this._validate(value)) {
          this.result.addInvalidTypeError("string.e001", "The value must be string.");
        } else {
          if (arg.length >= 1) {
            if (arg.length >= 2) {
              // max and min
              if (value.length >= arg[0] && value.length <= arg[1]) {
                // correct max and min
              } else {
                // incorrect max and min
                if (value.length > arg[1] && arg[1] != null) {
                  // > max
                  this.result.addInvalidValueError(
                    "string.e003",
                    `The value must not be longer than ${arg[1]} characters.`
                  );
                } else if (value.length < arg[0] && arg[0] != null) {
                  // < min
                  this.result.addInvalidValueError(
                    "string.e002",
                    `The value must not be shorter than ${arg[0]} characters.`
                  );
                }
              }
            } else {
              // max
              if (value.length <= arg[0]) {
                // correct max
              } else {
                // incorrect max
                this.result.addInvalidValueError(
                  "string.e003",
                  `The value must not be longer than ${arg[0]} characters.`
                );
              }
            }
          }
        }
      }
    }

    return this;
  }

  _validate(value) {
    if ((typeof value === "string" || value instanceof String) === false) {
      return false;
    } else {
      return true;
    }
  }
}

function StringMatcher(...params) {
  let matcher = new _String(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = StringMatcher;
