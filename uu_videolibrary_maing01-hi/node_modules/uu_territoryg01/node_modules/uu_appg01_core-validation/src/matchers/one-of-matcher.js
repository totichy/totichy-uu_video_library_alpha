"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _OneOf extends Matcher {
  constructor(...params) {
    super("oneOf");
    this.params = params;
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let arg = this.params;
    let expected = [];
    let oneOfIsValid = false;
    let isValid = false;

    if (Array.isArray(arg) && arg.length === 1 && Array.isArray(arg[0])) {
      arg = arg[0];
    }

    arg.forEach(valueType => {
      if (typeof valueType === "object" && "matchers" in valueType) {
        let validator = valueType;
        oneOfIsValid = true;
        let i = 0;
        let matcherName = "";
        validator.matchers.forEach(matcher => {
          let childResult = matcher.match(value, ctx, matcher.params[0]);
          if (!childResult.result.valid) {
            oneOfIsValid = false;
          }
          if (i > 0) {
            matcherName += ".";
          }

          let paramNames = "";
          matcher.params.forEach(key => {
            if (typeof key === "string" || typeof key === "number") {
              paramNames += key;
            } else {
              if (key !== undefined && key.name != null) {
                paramNames += key.name;
              } else {
                paramNames += `${key}`;
              }
            }
            if (key !== matcher.params[matcher.params.length - 1]) {
              paramNames += ",";
            }
          });

          matcherName += `${matcher.name}(${paramNames})`;
          i += 1;
        });

        if (oneOfIsValid) {
          isValid = true;
        }
        expected.push(matcherName);
      } else {
        if (valueType === value) {
          oneOfIsValid = true;
          isValid = true;
        } else {
          expected.push(`'${valueType}'`);
        }
      }
    });

    if (!isValid) {
      let message = "The value must be one of [";
      message += expected.join(",") + "].";
      this.result.addInvalidValueError("oneOf.e001", message);
    }

    return this;
  }
}

function OneOf(...params) {
  let matcher = new _OneOf(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = OneOf;
