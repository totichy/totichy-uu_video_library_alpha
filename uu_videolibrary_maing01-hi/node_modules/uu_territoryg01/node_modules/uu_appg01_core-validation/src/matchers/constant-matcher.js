"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _Constant extends Matcher {
  constructor(...params) {
    super("constant");
    this.params = params;
  }

  _checkForDate(constValue, value) {
    let val = value;
    let constVal = constValue;
    if (this._isDate(constValue)) {
      //constant must be date
      if (this._isDate(value)) {
        //is value date

        if (!(value instanceof Date)) {
          val = new Date(value);
        }
        if (!(constValue instanceof Date)) {
          constVal = new Date(constValue);
        }

        if (val.getTime() !== constVal.getTime()) {
          this.result.addInvalidValueError(
            "constant.e002",
            `The value must match the date ${new Date(constValue).toISOString()}.`
          );
        }
      } else {
        this.result.addInvalidTypeError(
          "constant.e001",
          `The value must be date.`
        );

      }
    }
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let constValue = this.params[0];
    if (constValue != undefined) {
      if (typeof constValue === "string") {
        //string or date
        if (this._isDate(constValue)) {
          this._checkForDate(constValue, value); //#1
        } else {
          if (constValue !== value) {
            if (typeof value === "string") {
              this.result.addInvalidValueError("constant.e002", `The value must match the string ${constValue}.`);
            } else {
              this.result.addInvalidTypeError("constant.e001", `The value must be string.`);
            }
          }
        }
      } else if (typeof constValue === "number") {
        //only number is number
        if (constValue !== value) {
          if (typeof value === "number") {
            this.result.addInvalidValueError("constant.e002", `The value must match the number ${constValue}.`);
          } else {
            this.result.addInvalidTypeError("constant.e001", `The value must be number.`);
          }
        }
      } else if (constValue instanceof Date) {
        //only date
        this._checkForDate(constValue, value);
      } else {
        if (constValue !== value) {
          if (typeof constValue === typeof value) {
            this.result.addInvalidValueError("constant.e002", `The value must match the ${typeof constValue} ${constValue}.`);
          } else {
            this.result.addInvalidTypeError("constant.e001", `The value must be ${typeof constValue}.`);
          }
        }
      }
    }

    return this;
  }

  _isDate(date) {
    return !!(function(d) {
      return d !== "Invalid Date" && !isNaN(d);
    })(new Date(date));
  }
}

function Constant(...params) {
  let matcher = new _Constant(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Constant;
