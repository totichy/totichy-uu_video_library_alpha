export = Files;
declare namespace Files {
    interface FileManager$fileTypeFilters {
    }
    interface FileManager$sharingOptions {
    }
    interface FileManager$fileButtons$itemList$label {
    }
    interface FileManager$fileButtons$itemList {
        active?: boolean;
        onClick?(...args: any): any;
        icon?: string;
        label?: string | FileManager$fileButtons$itemList$label;
    }
    interface FileManager$fileButtons {
        hideDropdown?: boolean;
        itemList?: (string | FileManager$fileButtons$itemList)[];
    }
    interface FileManager$lsiLabels {
    }
    interface FileManager$displayCreateButton {
    }
    interface FileManager$Props {
        baseUri?: string;
        uuCmdListBinaries?: ((...args: any)=>any) | string;
        uuCmdCreateBinary?: ((...args: any)=>any) | string;
        uuCmdUpdateBinary?: ((...args: any)=>any) | string;
        uuCmdUpdateBinaryData?: ((...args: any)=>any) | string;
        uuCmdDeleteBinary?: ((...args: any)=>any) | string;
        uuCmdGetBinaryData?: ((...args: any)=>any) | string;
        uuCmdGetBinaryDataUri?(...args: any): any;
        uuCmdListThumbnails?: ((...args: any)=>any) | string;
        uuCmdCreateThumbnail?: ((...args: any)=>any) | string;
        uuCmdUpdateThumbnailData?: ((...args: any)=>any) | string;
        uuCmdDeleteThumbnail?: ((...args: any)=>any) | string;
        uuCmdGetThumbnailData?: ((...args: any)=>any) | string;
        uuCmdGetThumbnailDataUri?(...args: any): any;
        fileList?: any[];
        thumbnailList?: any[];
        onFileCreate?(...args: any): any;
        onFileUpdate?(...args: any): any;
        onFileDelete?(...args: any): any;
        onFileShare?(...args: any): any;
        onFileClick?(...args: any): any;
        onSelect?(...args: any): any;
        thumbnailStrategy?: string;
        sortItems?: any[];
        sortValues?: any[];
        onSetFileType?(...args: any): any;
        fileTypeFilters?: FileManager$fileTypeFilters;
        dndEnabled?: boolean;
        sharingOptions?: FileManager$sharingOptions;
        fileButtons?: FileManager$fileButtons;
        lsiLabels?: FileManager$lsiLabels;
        onFilenameSet?: string;
        searchKeyList?: any[];
        selectable?: "none" | "single" | "multi";
        selectableOnly?: boolean;
        displayCreateButton?: boolean | string | FileManager$displayCreateButton;
        outputMaxHeight?: number;
        outputMaxWidth?: number;
        outputQuality?: number;
        headerHidden?: boolean;
        allowCustomTags?: boolean;
        ignoreTags?: string[];
        availableTags?: string[];
        onTagCreate?(...args: any): any;
        readOnly?: boolean;
        sizeLimit?: number;
        createButtonFileCodeRule?: "none" | "required" | "notRequired";
        dndFileCodeRule?: "none" | "required" | "notRequired";
        bulkActions?: any[];
        displayInfoBar?: boolean;
        displayFilterBar?: boolean;
        displayFilterByTags?: boolean;
        initialCollapseBars?: boolean;
    }
    function FileManager(props: FileManager$Props): any;
    interface FileUploader$lsiLabels {
    }
    interface FileUploader$Props {
        baseUri?: string;
        lsiLabels?: FileUploader$lsiLabels;
        uuCmdCreateBinary?: ((...args: any)=>any) | string;
        onSetFiles?(...args: any): any;
        customCodesEnabled?: boolean;
        customCodesRequired?: boolean;
        outputMaxHeight?: number;
        outputMaxWidth?: number;
        outputQuality?: number;
        sizeLimit?: number;
        dndEnabled?: boolean;
    }
    function FileUploader(props: FileUploader$Props): any;
}
declare global {
namespace Plus4U5 {
    namespace Files {
        interface FileManager$fileTypeFilters {
        }
        interface FileManager$sharingOptions {
        }
        interface FileManager$fileButtons$itemList$label {
        }
        interface FileManager$fileButtons$itemList {
            active?: boolean;
            onClick?(...args: any): any;
            icon?: string;
            label?: string | FileManager$fileButtons$itemList$label;
        }
        interface FileManager$fileButtons {
            hideDropdown?: boolean;
            itemList?: (string | FileManager$fileButtons$itemList)[];
        }
        interface FileManager$lsiLabels {
        }
        interface FileManager$displayCreateButton {
        }
        interface FileManager$Props {
            baseUri?: string;
            uuCmdListBinaries?: ((...args: any)=>any) | string;
            uuCmdCreateBinary?: ((...args: any)=>any) | string;
            uuCmdUpdateBinary?: ((...args: any)=>any) | string;
            uuCmdUpdateBinaryData?: ((...args: any)=>any) | string;
            uuCmdDeleteBinary?: ((...args: any)=>any) | string;
            uuCmdGetBinaryData?: ((...args: any)=>any) | string;
            uuCmdGetBinaryDataUri?(...args: any): any;
            uuCmdListThumbnails?: ((...args: any)=>any) | string;
            uuCmdCreateThumbnail?: ((...args: any)=>any) | string;
            uuCmdUpdateThumbnailData?: ((...args: any)=>any) | string;
            uuCmdDeleteThumbnail?: ((...args: any)=>any) | string;
            uuCmdGetThumbnailData?: ((...args: any)=>any) | string;
            uuCmdGetThumbnailDataUri?(...args: any): any;
            fileList?: any[];
            thumbnailList?: any[];
            onFileCreate?(...args: any): any;
            onFileUpdate?(...args: any): any;
            onFileDelete?(...args: any): any;
            onFileShare?(...args: any): any;
            onFileClick?(...args: any): any;
            onSelect?(...args: any): any;
            thumbnailStrategy?: string;
            sortItems?: any[];
            sortValues?: any[];
            onSetFileType?(...args: any): any;
            fileTypeFilters?: FileManager$fileTypeFilters;
            dndEnabled?: boolean;
            sharingOptions?: FileManager$sharingOptions;
            fileButtons?: FileManager$fileButtons;
            lsiLabels?: FileManager$lsiLabels;
            onFilenameSet?: string;
            searchKeyList?: any[];
            selectable?: "none" | "single" | "multi";
            selectableOnly?: boolean;
            displayCreateButton?: boolean | string | FileManager$displayCreateButton;
            outputMaxHeight?: number;
            outputMaxWidth?: number;
            outputQuality?: number;
            headerHidden?: boolean;
            allowCustomTags?: boolean;
            ignoreTags?: string[];
            availableTags?: string[];
            onTagCreate?(...args: any): any;
            readOnly?: boolean;
            sizeLimit?: number;
            createButtonFileCodeRule?: "none" | "required" | "notRequired";
            dndFileCodeRule?: "none" | "required" | "notRequired";
            bulkActions?: any[];
            displayInfoBar?: boolean;
            displayFilterBar?: boolean;
            displayFilterByTags?: boolean;
            initialCollapseBars?: boolean;
        }
        function FileManager(props: FileManager$Props): any;
        interface FileUploader$lsiLabels {
        }
        interface FileUploader$Props {
            baseUri?: string;
            lsiLabels?: FileUploader$lsiLabels;
            uuCmdCreateBinary?: ((...args: any)=>any) | string;
            onSetFiles?(...args: any): any;
            customCodesEnabled?: boolean;
            customCodesRequired?: boolean;
            outputMaxHeight?: number;
            outputMaxWidth?: number;
            outputQuality?: number;
            sizeLimit?: number;
            dndEnabled?: boolean;
        }
        function FileUploader(props: FileUploader$Props): any;
    }
}
}