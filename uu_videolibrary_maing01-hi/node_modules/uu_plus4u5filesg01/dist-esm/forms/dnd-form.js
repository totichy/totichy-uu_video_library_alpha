import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import TagsSelect from "./tags-select.js";
import DndFormRow from "./dnd-form-row";
import Css from "../helpers/css.js";
import { adjustFile, getMaxFileSize } from "../helpers/file.js";

import "./dnd-form.less";

const DnDBinaryForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "DnDBinaryForm",
    classNames: {
      main: Config.CSS + "dnd-form",
      row:
        Config.CSS +
        "dnd-form-row " +
        Css.css`
        padding: 24px 0;
      `,
      rowLabel: Config.CSS + "dnd-form-row-label",
      rowLabelRequired: Config.CSS + "dnd-form-row-label-required",
      formItem: Css.css`
        &&& {
          margin: 8px 0 0;
        }
      `
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    done: UU5.PropTypes.func,
    onCancel: UU5.PropTypes.func,
    fileList: UU5.PropTypes.oneOfType([UU5.PropTypes.object, UU5.PropTypes.array]),
    lsiLabels: UU5.PropTypes.object,
    customCodesEnabled: UU5.PropTypes.bool,
    customCodesRequired: UU5.PropTypes.bool,
    outputMaxHeight: UU5.PropTypes.number,
    outputMaxWidth: UU5.PropTypes.number,
    outputQuality: UU5.PropTypes.number,
    ignoreTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    availableTags: UU5.PropTypes.arrayOf(UU5.PropTypes.string),
    allowCustomTags: UU5.PropTypes.bool,
    validateCodeUniqueness: UU5.PropTypes.func
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {};
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    this._rowRefs = [];
    return {};
  },
  componentDidMount() {
    setTimeout(() => this._rowRefs[0] && this._rowRefs[0].focusCodeInput(), 200); // TODO Remove / lower timeout when UU5 fixes animation of modal.
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  getForm() {
    return this._form;
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _onSave() {
    let values = [];
    for (let i = 0; i < this._rowRefs.length; i++) {
      values.push(this._rowRefs[i].getValues());
    }

    this.props.done(values);
    this.props.onCancel();
  },

  _getRows() {
    let outputQuality = this.props.outputQuality ? this.props.outputQuality * 100 : undefined;
    let files =
      !this.props.fileList || Array.isArray(this.props.fileList) ? this.props.fileList : [this.props.fileList];
    let rows = [];
    for (let i = 0; i < files.length; i++) {
      let file = files[i];
      rows.push(
        <DndFormRow
          file={file}
          key={i + "-row"}
          ref_={ref => (this._rowRefs[i] = ref)}
          lsiLabels={this.props.lsiLabels}
          customCodesEnabled={this.props.customCodesEnabled}
          customCodesRequired={this.props.customCodesRequired}
          outputMaxHeight={this.props.outputMaxHeight}
          outputMaxWidth={this.props.outputMaxWidth}
          outputQuality={outputQuality}
          ignoreTags={this.props.ignoreTags}
          availableTags={this.props.availableTags}
          allowCustomTags={this.props.allowCustomTags}
          sizeLimit={this.props.sizeLimit}
          validateCodeUniqueness={this.props.validateCodeUniqueness}
          tagList={file ? file.tagList : undefined}
        />
      );
      if (i < files.length - 1) rows.push(<UU5.Bricks.Line key={i + "-line"} />);
    }
    return rows;
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return (
      <UU5.Forms.Form
        {...this.getMainPropsToPass()}
        onSave={({ component, values }) => this._onSave(component, values)}
        onCancel={this.props.onCancel}
        ref_={form => (this._form = form)}
      >
        {this._getRows()}
      </UU5.Forms.Form>
    );
  }
  //@@viewOff:render
});

export default DnDBinaryForm;
