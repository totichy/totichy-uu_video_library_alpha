//@@viewOn:imports
import * as UU5 from "uu5g04";
import Config from "../config/config.js";
import Lsi from "../config/lsi.js";
import LsiHelper from "../helpers/lsi-helper.js";
import Css from "../helpers/css.js";
import { adjustFile, getMaxFileSize, isImage, createObjectURL, getImageElement } from "../helpers/file.js";
import "./dnd-form.less";
//@@viewOff:imports

const previewSize = 112;
const qualityMap = {
  low: 50,
  standard: 70,
  medium: 85,
  high: 100
};
const sizeMap = {
  standard: false,
  original: true
};
const initialFeedback = { feedback: undefined, message: undefined };
function getInitialState(props) {
  return {
    file: props.file,
    adjustedFile: props.file,
    src: props.file ? createObjectURL(props.file) : undefined,
    quality: props.outputQuality == null ? Config.IMAGE_QUALITY : props.outputQuality,
    preserveDimensions: false,
    code: undefined,
    tags: props.tagList,
    fileFeedback: initialFeedback,
    codeFeedback: initialFeedback,
    sizeFeedback: initialFeedback,
    qualityFeedback: initialFeedback,
    allowResize: true
  };
}

const DnDBinaryForm = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.LsiMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Config.TAG + "DnDBinaryFormRow",
    classNames: {
      main:
        Config.CSS +
        "dnd-form-row " +
        Css.css`
        padding: 24px 0;
      `,
      label: Config.CSS + "dnd-form-row-label",
      labelRequired: Config.CSS + "dnd-form-row-label-required",
      fileInput: () => Css.css`
        margin: 0;
      `,
      flexWrapper: () => Css.css`
        display: flex;
        padding-top: 8px;
      `,
      inputs: () => Css.css`
        flex: 1 1 0;

        & > .uu5-forms-input {
          &:first-child {
            margin: 0;
          }

          &:not(:first-child) {
            margin: 8px 0 0;
          }
        }
      `,
      imagePreview: () => Css.css`
        position: relative;
        flex-basis: ${previewSize}px;
        margin-left: 16px;
        display: flex;
        justify-content: center;
      `,
      imagePreviewMagnify: () => Css.css`
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        top: 4px;
        right: 4px;
        width: 24px;
        height: 24px;
        opacity: 0.8;
        background: #FFFFFF;
        box-shadow: 0 2px 4px 0 rgba(0,0,0,0.50);
        border-radius: 4px;
        font-size: 18px;
        pointer-events: none;
      `
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {},
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  getInitialState() {
    this._imageMaxWidth = this.props.outputMaxWidth || Config.IMAGE_WIDTH;
    this._imageMaxHeight = this.props.outputMaxHeight || Config.IMAGE_HEIGHT;
    return getInitialState(this.props);
  },

  componentDidMount() {
    this._adjustFile();
    this._checkImageSize();
  },

  componentWillReceiveProps(nextProps) {
    this._imageMaxWidth = nextProps.outputMaxWidth || Config.IMAGE_WIDTH;
    this._imageMaxHeight = nextProps.outputMaxHeight || Config.IMAGE_HEIGHT;
    if (this.props.file !== nextProps.file) {
      this.setState(getInitialState(nextProps), this._adjustFile);
      this._checkImageSize();
    }
  },
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  focusCodeInput() {
    if (this._codeRef) this._codeRef.focus();
  },

  getValues() {
    return {
      originalFile: this.state.file,
      file: this.state.adjustedFile,
      code: this.state.code,
      tags: this.state.tags
    };
  },
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _registerCodeInput(ref) {
    this._codeRef = ref;
  },

  _onChangeQuality({ value }) {
    let qualityFeedback = { ...initialFeedback };

    if (value === "high") {
      qualityFeedback.feedback = "warning";
      qualityFeedback.message = LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_QUALITY_WARNING);
    }

    this.setState({ quality: qualityMap[value], qualityFeedback }, this._adjustFile);
  },

  _onChangePreserveDimensions({ value }) {
    let sizeFeedback = { ...initialFeedback };

    if (value === "original") {
      sizeFeedback.feedback = "warning";
      sizeFeedback.message = LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_SIZE_WARNING);
    }

    this.setState({ preserveDimensions: sizeMap[value], sizeFeedback }, this._adjustFile);
  },

  _onChangeCode({ value }) {
    this.setState({ code: value });
  },

  _onBlurCode({ value }) {
    let correctFormat = !value || !!value.match(/^([a-zA-Z0-9_]){3,64}$/g);
    let uniqueCode =
      value && typeof this.props.validateCodeUniqueness === "function"
        ? this.props.validateCodeUniqueness(value)
        : true;
    let correctValue = !!(!this.props.customCodesRequired || value);
    let codeFeedback = { ...initialFeedback };

    if (!correctFormat || !uniqueCode || !correctValue) {
      let message;
      if (!correctValue) {
        message = Lsi.LSI_REQUIRED_CODE;
      } else if (!correctFormat) {
        message = Lsi.LSI_INVALID_CODE;
      } else if (!uniqueCode) {
        message = Lsi.LSI_DUPLICATE_CODE;
      }
      codeFeedback.feedback = "error";
      codeFeedback.message = LsiHelper.getLsiComponent(message);
    }

    this.setState({ codeFeedback });
  },

  _onChangeTags({ value }) {
    this.setState({ tags: value });
  },

  _onChangeFile({ value }) {
    this.setState({ file: value, adjustedFile: value }, () => {
      this._adjustFile();
      this._checkImageSize();
    });
  },

  _checkImageSize() {
    if (isImage(this.state.file)) {
      getImageElement(this.state.file).then(imageElement => {
        let imgHeight = imageElement.naturalHeight || imageElement.height;
        let imgWidth = imageElement.naturalWidth || imageElement.width;
        if (imgHeight <= this._imageMaxHeight || imgWidth <= this._imageMaxWidth) {
          this.setState({ allowResize: false });
        }
      });
    }
  },

  _adjustFile() {
    let file = this.state.file;
    let maxWidth = this.state.preserveDimensions ? undefined : this._imageMaxWidth;
    let maxHeight = this.state.preserveDimensions ? undefined : this._imageMaxHeight;

    if (file) {
      adjustFile(file, {
        outputQuality: this.state.quality / 100,
        outputMaxWidth: maxWidth,
        outputMaxHeight: maxHeight
      }).then(adjustedFile => {
        let newState = {
          adjustedFile,
          src: createObjectURL(adjustedFile),
          fileFeedback: { ...initialFeedback }
        };
        if (adjustedFile && adjustedFile.size > getMaxFileSize(this.props.sizeLimit) * 1024) {
          newState.fileFeedback.feedback = "error";
          newState.fileFeedback.message = LsiHelper.getLsiComponent(this.props.lsiLabels.fileSizeExceededError, {
            maxSize: getMaxFileSize(this.props.sizeLimit)
          });
        } else {
          newState.fileFeedback.feedback = "initial";
          newState.fileFeedback.message = undefined;
        }
        this.setState(newState);
      });
    } else {
      this.setState(getInitialState({ ...this.props, file }));
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    let {
      availableTags,
      allowCustomTags,
      customCodesRequired,
      ignoreTags,
      outputQuality,
      outputMaxHeight,
      outputMaxWidth
    } = this.props;
    let {
      file,
      adjustedFile,
      quality,
      preserveDimensions,
      tags,
      code,
      src,
      fileFeedback,
      codeFeedback,
      sizeFeedback,
      qualityFeedback,
      allowResize
    } = this.state;
    let showTags = availableTags || allowCustomTags;
    let usedIsImage = isImage(file);
    let codePlaceholder = UU5.Common.Tools.getLsiValueByLanguage(
      Lsi[customCodesRequired ? "LSI_LABEL_ADD_BINARY_CODE_REQUIRED" : "LSI_NOT_REQUIRED_CODE_PLACEHOLDER"],
      this.getLanguage()
    );
    availableTags = Array.isArray(availableTags)
      ? availableTags.map((tag) => ({ value: tag, content: tag }))
      : undefined;

    return (
      <UU5.Bricks.Row {...this.getMainPropsToPass()}>
        <UU5.Forms.File
          className={this.getClassName("fileInput")}
          value={adjustedFile}
          onChange={this._onChangeFile}
          required
          {...fileFeedback}
        />
        <div className={this.getClassName("flexWrapper")}>
          <div className={this.getClassName("inputs")}>
            {this.props.customCodesEnabled ? (
              <UU5.Forms.Text
                ref_={this._registerCodeInput}
                inputAttrs={{ autoComplete: "off" }}
                required={customCodesRequired}
                requiredMessage={
                  customCodesRequired && LsiHelper.getLsiComponent(Lsi.LSI_LABEL_ADD_BINARY_CODE_REQUIRED)
                }
                value={code}
                onChange={this._onChangeCode}
                onBlur={this._onBlurCode}
                placeholder={codePlaceholder}
                {...codeFeedback}
              />
            ) : null}
            {showTags ? (
              <UU5.Forms.TagSelect
                availableTags={availableTags}
                ignoreTags={ignoreTags}
                allowCustomTags={allowCustomTags}
                value={tags}
                onChange={this._onChangeTags}
                multiple
              />
            ) : null}
            {usedIsImage && outputQuality == null ? (
              <UU5.Forms.Select
                value={Object.keys(qualityMap).find(item => quality === qualityMap[item])}
                onChange={this._onChangeQuality}
                {...qualityFeedback}
              >
                <UU5.Forms.Select.Option value="low" content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_QUALITY_LOW)} />
                <UU5.Forms.Select.Option
                  value="standard"
                  content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_QUALITY_STANDARD)}
                />
                <UU5.Forms.Select.Option
                  value="medium"
                  content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_QUALITY_MEDIUM)}
                />
                <UU5.Forms.Select.Option value="high" content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_QUALITY_HIGH)} />
              </UU5.Forms.Select>
            ) : null}
            {usedIsImage && !outputMaxHeight && !outputMaxWidth ? (
              <UU5.Forms.Select
                value={
                  allowResize ? Object.keys(sizeMap).find((item) => preserveDimensions === sizeMap[item]) : "original"
                }
                onChange={this._onChangePreserveDimensions}
                disabled={!allowResize}
                {...sizeFeedback}
              >
                <UU5.Forms.Select.Option
                  value="standard"
                  content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_SIZE_STANDARD)}
                />
                <UU5.Forms.Select.Option
                  value="original"
                  content={LsiHelper.getLsiComponent(Lsi.LSI_IMAGE_SIZE_ORIGINAL)}
                />
              </UU5.Forms.Select>
            ) : null}
          </div>
          {usedIsImage ? (
            <div className={this.getClassName("imagePreview")}>
              <UU5.Imaging.Image src={src} width={previewSize} height={previewSize} fit="coverNoScaleUp" />
              <UU5.Bricks.Icon icon="mdi-magnify-plus-outline" className={this.getClassName("imagePreviewMagnify")} />
            </div>
          ) : null}
        </div>
      </UU5.Bricks.Row>
    );
  }
  //@@viewOff:render
});

export default DnDBinaryForm;
