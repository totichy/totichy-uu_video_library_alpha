import UU5 = require('uu5g04');
export = CodeKit;
declare namespace CodeKit {
    namespace CodeKit {
        interface CodeEditor$Props {
            onFormat?(...args: any): any;
        }
        function CodeEditor(props: CodeEditor$Props): any;
        interface JsonEditor$Props {
            format?: "pretty" | "minified" | "default";
            valueFormat?: "pretty" | "minified" | "object" | "default";
        }
        function JsonEditor(props: JsonEditor$Props): any;
        interface Uu5String$Props {
            uu5string?: string;
        }
        function Uu5String(props: Uu5String$Props): any;
        interface Uu5StringEditor$Props {
            format?: "pretty" | "minified" | "default";
            valueFormat?: "pretty" | "minified" | "default";
        }
        function Uu5StringEditor(props: Uu5StringEditor$Props): any;
        function MarkdownEditor(props: any): any;
        interface CodeViewer$ace {
        }
        interface CodeViewer$editorProps {
        }
        interface CodeViewer$markers {
            startRow: number;
            startColumn?: number;
            endRow?: number;
            endColumn?: number;
            colorSchema?: string;
        }
        interface CodeViewer$style {
        }
        interface CodeViewer$Props {
            ace?: CodeViewer$ace;
            codeStyle?: string;
            focus?: boolean;
            theme?: string;
            className?: string;
            height?: string | number;
            width?: string | number;
            fontSize?: number | string;
            showGutter?: boolean;
            showBorder?: boolean;
            padding?: number;
            onChange?(...args: any): any;
            onCopy?(...args: any): any;
            onPaste?(...args: any): any;
            onFocus?(...args: any): any;
            onBlur?(...args: any): any;
            onScroll?(...args: any): any;
            value?: string;
            defaultValue?: string;
            onLoad?(...args: any): any;
            onBeforeLoad?(...args: any): any;
            minRows?: number;
            maxRows?: number;
            rows?: number;
            readOnly?: boolean;
            highlightActiveLine?: boolean;
            highlightAttrsSyntax?: boolean;
            indent?: number;
            showPrintMargin?: boolean;
            cursorStart?: number;
            editorProps?: CodeViewer$editorProps;
            annotations?: any[];
            markers?: (number | (number | string)[] | CodeViewer$markers)[];
            keyboardHandler?: string;
            wrapEnabled?: boolean;
            enableBasicAutocompletion?: boolean | any[];
            enableLiveAutocompletion?: boolean | any[];
            commands?: any[];
            style?: CodeViewer$style;
        }
        function CodeViewer(props: CodeViewer$Props): any;
        interface MarkdownViewer$Props {
            value?: string;
        }
        function MarkdownViewer(props: MarkdownViewer$Props): any;
    }
}
declare module 'uu5g04' {
    namespace CodeKit {
        namespace CodeKit {
            interface CodeEditor$Props {
                onFormat?(...args: any): any;
            }
            function CodeEditor(props: CodeEditor$Props): any;
            interface JsonEditor$Props {
                format?: "pretty" | "minified" | "default";
                valueFormat?: "pretty" | "minified" | "object" | "default";
            }
            function JsonEditor(props: JsonEditor$Props): any;
            interface Uu5String$Props {
                uu5string?: string;
            }
            function Uu5String(props: Uu5String$Props): any;
            interface Uu5StringEditor$Props {
                format?: "pretty" | "minified" | "default";
                valueFormat?: "pretty" | "minified" | "default";
            }
            function Uu5StringEditor(props: Uu5StringEditor$Props): any;
            function MarkdownEditor(props: any): any;
            interface CodeViewer$ace {
            }
            interface CodeViewer$editorProps {
            }
            interface CodeViewer$markers {
                startRow: number;
                startColumn?: number;
                endRow?: number;
                endColumn?: number;
                colorSchema?: string;
            }
            interface CodeViewer$style {
            }
            interface CodeViewer$Props {
                ace?: CodeViewer$ace;
                codeStyle?: string;
                focus?: boolean;
                theme?: string;
                className?: string;
                height?: string | number;
                width?: string | number;
                fontSize?: number | string;
                showGutter?: boolean;
                showBorder?: boolean;
                padding?: number;
                onChange?(...args: any): any;
                onCopy?(...args: any): any;
                onPaste?(...args: any): any;
                onFocus?(...args: any): any;
                onBlur?(...args: any): any;
                onScroll?(...args: any): any;
                value?: string;
                defaultValue?: string;
                onLoad?(...args: any): any;
                onBeforeLoad?(...args: any): any;
                minRows?: number;
                maxRows?: number;
                rows?: number;
                readOnly?: boolean;
                highlightActiveLine?: boolean;
                highlightAttrsSyntax?: boolean;
                indent?: number;
                showPrintMargin?: boolean;
                cursorStart?: number;
                editorProps?: CodeViewer$editorProps;
                annotations?: any[];
                markers?: (number | (number | string)[] | CodeViewer$markers)[];
                keyboardHandler?: string;
                wrapEnabled?: boolean;
                enableBasicAutocompletion?: boolean | any[];
                enableLiveAutocompletion?: boolean | any[];
                commands?: any[];
                style?: CodeViewer$style;
            }
            function CodeViewer(props: CodeViewer$Props): any;
            interface MarkdownViewer$Props {
                value?: string;
            }
            function MarkdownViewer(props: MarkdownViewer$Props): any;
        }
    }
}
declare global {
namespace UU5 {
    namespace CodeKit {
        namespace CodeKit {
            interface CodeEditor$Props {
                onFormat?(...args: any): any;
            }
            function CodeEditor(props: CodeEditor$Props): any;
            interface JsonEditor$Props {
                format?: "pretty" | "minified" | "default";
                valueFormat?: "pretty" | "minified" | "object" | "default";
            }
            function JsonEditor(props: JsonEditor$Props): any;
            interface Uu5String$Props {
                uu5string?: string;
            }
            function Uu5String(props: Uu5String$Props): any;
            interface Uu5StringEditor$Props {
                format?: "pretty" | "minified" | "default";
                valueFormat?: "pretty" | "minified" | "default";
            }
            function Uu5StringEditor(props: Uu5StringEditor$Props): any;
            function MarkdownEditor(props: any): any;
            interface CodeViewer$ace {
            }
            interface CodeViewer$editorProps {
            }
            interface CodeViewer$markers {
                startRow: number;
                startColumn?: number;
                endRow?: number;
                endColumn?: number;
                colorSchema?: string;
            }
            interface CodeViewer$style {
            }
            interface CodeViewer$Props {
                ace?: CodeViewer$ace;
                codeStyle?: string;
                focus?: boolean;
                theme?: string;
                className?: string;
                height?: string | number;
                width?: string | number;
                fontSize?: number | string;
                showGutter?: boolean;
                showBorder?: boolean;
                padding?: number;
                onChange?(...args: any): any;
                onCopy?(...args: any): any;
                onPaste?(...args: any): any;
                onFocus?(...args: any): any;
                onBlur?(...args: any): any;
                onScroll?(...args: any): any;
                value?: string;
                defaultValue?: string;
                onLoad?(...args: any): any;
                onBeforeLoad?(...args: any): any;
                minRows?: number;
                maxRows?: number;
                rows?: number;
                readOnly?: boolean;
                highlightActiveLine?: boolean;
                highlightAttrsSyntax?: boolean;
                indent?: number;
                showPrintMargin?: boolean;
                cursorStart?: number;
                editorProps?: CodeViewer$editorProps;
                annotations?: any[];
                markers?: (number | (number | string)[] | CodeViewer$markers)[];
                keyboardHandler?: string;
                wrapEnabled?: boolean;
                enableBasicAutocompletion?: boolean | any[];
                enableLiveAutocompletion?: boolean | any[];
                commands?: any[];
                style?: CodeViewer$style;
            }
            function CodeViewer(props: CodeViewer$Props): any;
            interface MarkdownViewer$Props {
                value?: string;
            }
            function MarkdownViewer(props: MarkdownViewer$Props): any;
        }
    }
}
}