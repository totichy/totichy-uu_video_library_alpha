"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _Integer extends Matcher {
  constructor(...params) {
    super("integer");
    this.params = params;
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let arg = this.params;

    if (!this._validate(value)) {
      this.result.addInvalidTypeError("integer.e001", "The value must be integer.");
    } else {
      if (
        arg.length >= 1 &&
        (typeof arg[0] === "number" ||
          arg[0] instanceof Number ||
          typeof arg[1] === "number" ||
          arg[1] instanceof Number)
      ) {
        if (arg.length >= 2) {
          // max and min

          if (value.length >= arg[0] && value.length <= arg[1]) {
            // correct max and min
          } else {
            // incorrect max and min
            if (value > arg[1] && arg[1] != null) {
              this.result.addInvalidValueError("integer.e003", `The value must not be higher than ${arg[1]}.`);
            } else if (value < arg[0] && arg[0] != null) {
              this.result.addInvalidValueError("integer.e002", `The value must be at least ${arg[0]}.`);
            }
          }
        } else {
          // max
          if (value <= arg[0] && value >= 0) {
            // correct max
          } else {
            // incorrect max
            if (value >= 0) {
              this.result.addInvalidValueError("integer.e003", `The value must not be higher than ${arg[0]}.`);
            } else {
              this.result.addInvalidValueError("integer.e002", `The value must be at least ${0}.`);
            }
          }
        }
      }
    }

    return this;
  }

  _validate(value) {
    if (
      (value <= Number.MAX_SAFE_INTEGER &&
        value >= Number.MIN_SAFE_INTEGER &&
        this._decimalPlaces(value) === 0 &&
        (typeof value === "number" || value instanceof Number)) === false
    ) {
      return false;
    } else {
      return true;
    }
  }

  _decimalPlaces(num) {
    let match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
      return 0;
    }
    return Math.max(
      0,
      // Number of digits right of decimal point.
      (match[1] ? match[1].length : 0) -
        // Adjust for scientific notation.
        (match[2] ? +match[2] : 0)
    );
  }
}

function Integer(...params) {
  let matcher = new _Integer(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Integer;
