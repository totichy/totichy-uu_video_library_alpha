"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _isRequired extends Matcher {
  constructor(...params) {
    super("isRequired");
    this.params = params;
  }

  match(val, ctx, ...args) {
    this.result = new ValidationResult();

    if (val != undefined) {
      return this;
    }

    if (this.params.length === 1 && (Array.isArray(this.params[0]) || this.params[0] instanceof Array)) {
      this.params = this.params[0];
    }

    let parentStruct = ctx.parentValue;
    if (this.params.length === 1 && (Array.isArray(this.params[0]) || this.params[0] instanceof Array)) {
      this.params = this.params[0];
    }

    let missingKeys = new Set([]);
    if (this.params.length === 0 && parentStruct.constructor !== Object) {
      this.result.addMissingKey("isRequired.e001", "The value is required but missing.");
    } else {
      this.params.forEach(param => {
        if (parentStruct[param] === undefined) {
          missingKeys.add(param);
        }
      });
      if (this.params.length === missingKeys.size) {
        this.result.addMissingKey("isRequired.e001", "The value is required but missing.");
      }
    }

    return this;
  }
}

function IsRequired(...params) {
  let matcher = new _isRequired(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = IsRequired;
