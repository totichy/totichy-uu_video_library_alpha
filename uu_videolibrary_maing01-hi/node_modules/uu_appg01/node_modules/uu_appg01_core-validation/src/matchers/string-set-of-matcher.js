"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _StringSetOf extends Matcher {
  constructor(...params) {
    super("stringSetOf");
    this.params = params;
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let arg = this.params;

    let setOf = arg[0];
    let separator = " ";

    if (arg.length >= 2) {
      separator = arg[1];
    }

    if ((typeof value === "string" || value instanceof String) === false) {
      // error it is not string
      this.result.addInvalidTypeError("stringSetOf.e001", "The value must be string.");
    } else {
      if (this._hasDuplicates(value.split(separator))) {
        // error dupliacations
        this.result.addInvalidValueError("stringSetOf.e002", "The values must be unique.");
      } else {
        let correct = true;
        value.split(separator).forEach(function(element) {
          if (setOf.indexOf(element) === -1) {
            correct = false;
          }
        });

        if (!correct) {
          // eror values must be one of ..
          this.result.addInvalidValueError("stringSetOf.e003", `The values must be one of [${arg[0]}].`);
        }
      }
    }

    return this;
  }

  _hasDuplicates(array) {
    return new Set(array).size !== array.length;
  }
}

function StringSetOf(...params) {
  let matcher = new _StringSetOf(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = StringSetOf;
