"use strict";

const Matcher = require("../matcher");
const ValidationResult = require("../validation-result");
const Validator = require("../validator");

class _Float extends Matcher {
  constructor(...params) {
    super("float");
    this.params = params;
  }

  match(value, ctx, ...args) {
    this.result = new ValidationResult();

    if (value == undefined) {
      return this;
    }

    let arg = this.params;

    if (!this._validate(value)) {
      this.result.addInvalidTypeError("float.e001", "The value must be decimal.");
    } else {
      if (arg.length >= 1 && (typeof arg[0] === "number" || arg[0] instanceof Number || arg[0] == null)) {
        if (arg.length >= 2 && (typeof arg[1] === "number" || arg[1] instanceof Number || arg[1] == null)) {
          if (arg.length >= 3) {
            if (
              (value >= arg[0] || arg[0] == null) &&
              (value <= arg[1] || arg[1] == null) &&
              this._decimalPlaces(value) <= arg[2]
            ) {
              // correct max, min, decimal
            } else {
              if (this._decimalPlaces(value) > arg[2]) {
                // float.e004
                // The value must not have more than %s decimal places. (if %s = 1, 1 decimal place)
                this.result.addInvalidValueError(
                  "float.e004",
                  `The value must not have more than ${arg[2]} decimal places. (if ${arg[2]} = 1, 1 decimal place)`
                );
              } else if (value < arg[0]) {
                // lower than min
                this.result.addInvalidValueError("float.e002", `The value must be at least ${arg[0]}.`);
              } else {
                // higter than max
                this.result.addInvalidValueError("float.e003", `The value must not be higher than ${arg[1]}.`);
              }
            }
          } else {
            // max and max decimal places
            if (value <= arg[0] && this._decimalPlaces(value) <= arg[1]) {
              // correct
            } else {
              // incorrect max and decimal

              if (this._decimalPlaces(value) > arg[1]) {
                // float.e004
                // The value must not have more than %s decimal places. (if %s = 1, 1 decimal place)
                this.result.addInvalidValueError(
                  "float.e004",
                  `The value must not have more than ${arg[1]} decimal places. (if ${arg[1]} = 1, 1 decimal place)`
                );
              } else {
                // float.e003
                // The value must not be higher than %s.
                this.result.addInvalidValueError("float.e003", `The value must not be higher than ${arg[0]}.`);
              }
            }
          }
        } else {
          // only max
          if (!(this._decimalPlaces(value) <= arg[0])) {
            // float.e003
            // The value must not be higher than %s.

            this.result.addInvalidValueError(
              "float.e004",
              `The value must not have more than ${arg[1]} decimal places. (if ${arg[1]} = 1, 1 decimal place)`
            );
          }
        }
      }
    }

    return this;
  }

  _validate(value) {
    if (
      (value <= Number.MAX_VALUE &&
        value >= -Number.MAX_VALUE &&
        (typeof value === "number" || value instanceof Number)) === false
    ) {
      return false;
    } else {
      return true;
    }
  }

  _decimalPlaces(num) {
    var match = ("" + num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match) {
      return 0;
    }
    return Math.max(
      0,
      // Number of digits right of decimal point.
      (match[1] ? match[1].length : 0) -
        // Adjust for scientific notation.
        (match[2] ? +match[2] : 0)
    );
  }
}

function Float(...params) {
  let matcher = new _Float(...params);
  if (this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = Float;
