"use strict";

const { Perflog } = require("uu_appg01_core-perflog");
const { Config } = require("uu_appg01_core-utils");
const { Uri, UriBuilder } = require("uu_appg01_core-uri");
const BadRequest = require("../error/bad-request.js");
const UriTooLong = require("../error/uri-too-long.js");
const UseCaseContext = require("../endpoint/use-case-context.js");

const MIDDLEWARE_ORDER = -200;

const DEFAULT_PORTS = {
  http: 80,
  https: 443
};

/**
 * Encapsulates the uu_appg01_core-uri module for use as
 * an Express middleware.
 */
class UriParser {

  constructor() {
    this.order = MIDDLEWARE_ORDER;
    this._configured = false;
  }

  /**
   * Since Express doesn't provide an easy way to get the full
   * request URL, it is constructed from individual parts.
   * BadRequest is thrown on UriParser errors.
   * @param req
   * @param res
   * @param next
   * @private
   */
  async pre(req, res, next) {
    if (!this._configured) {
      this._host = Config.get("server_host");
      this._port = Config.get("server_port");
      this._configured = true;
    }

    try {
      // build full url using helper methods derived from Ruby Rack implementation
      await Perflog.measureSection("UU_APP_SERVER_PARSE_URI", () => {
        let scheme = this._getScheme(req);
        let host = this._getHost(req);
        let port = this._getPort(req);
        port = port === DEFAULT_PORTS[scheme] ? "" : `:${port}`;
        let fullUrl = `${scheme}://${host}${port}${req.url}`;

        // transform the full url to Uri object
        let uri = Uri.parse(fullUrl);
        UseCaseContext.setUri(uri);
        res.locals.uri = uri;
        let baseUriAlias = req.get("X-Base-Uri-Alias");
        if (baseUriAlias) {
          baseUriAlias = baseUriAlias.split(";")[0].trim().replace(/\/$/, "");
          UseCaseContext.setBaseUriAlias(baseUriAlias);
          res.locals.baseUriAlias = baseUriAlias;
        }
      });
      next();
    } catch (err) {
      next(new BadRequest("Request URI is not valid.", err));
    }
  }

  _getScheme(req) {
    let hdr;
    if ((hdr = req.get("X-Forwarded-Proto"))) {
      return hdr.split(",")[0].trim();
    } else if ((hdr = req.get("X-Forwarded-Scheme"))) {
      return hdr.trim();
    } else {
      return req.protocol;
    }
  }

  _getHostWithPort(req) {
    let hdr;
    if ((hdr = req.get("X-Forwarded-Host"))) {
      let host = hdr.split(/,\s?/);
      return host[host.length - 1].trim();
    } else {
      return req.get("Host") || this._host + ":" + this._port;
    }
  }

  _getPort(req) {
    let p;
    if ((p = this._getHostWithPort(req).split(":")[1])) {
      return parseInt(p);
    } else if ((p = req.get("X-Forwarded-Port"))) {
      return parseInt(p.split(",")[0]);
    } else if (req.get("X-Forwarded-Host")) {
      return DEFAULT_PORTS[this._getScheme(req)];
    } else if (req.get("X-Forwarded-Proto")) {
      let scheme = req
        .get("X-Forwarded-Proto")
        .split(",")[0]
        .trim();
      return DEFAULT_PORTS[scheme];
    } else {
      return this._port;
    }
  }

  _getHost(req) {
    return this._getHostWithPort(req).replace(/:\d+$/, "");
  }

}

/**
 * Module exports UriParser constructor.
 * @type {UriParser}
 */
module.exports = UriParser;
