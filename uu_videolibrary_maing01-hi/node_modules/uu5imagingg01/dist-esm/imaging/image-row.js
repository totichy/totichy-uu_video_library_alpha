import UU5 from "uu5g04";
import Cfg from "../config/config.js";
import ImageRowBody from "./internal/image-row-body.js";

function getAlignmentStyle(alignment) {
  if (alignment === "center") {
    return "justify-content: center;";
  } else if (alignment === "left") {
    return "justify-content: flex-start;";
  } else if (alignment === "right") {
    return "justify-content: flex-end;";
  } else {
    // block
    return "justify-content: space-between;";
  }
}

const bodyProps = {
  data: true,
  effect: true,
  thumbSuffix: true,
  lightbox: true,
  minHeight: true,
  maxHeight: true,
  alignment: true,
  rowWidth: true,
  session: true,
  authenticate: true
};

export const ImageRow = UU5.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [UU5.Common.BaseMixin, UU5.Common.ElementaryMixin, UU5.Common.NestingLevelMixin],
  //@@viewOff:mixins

  //@@viewOn:statics
  statics: {
    tagName: Cfg.TAG + "ImageRow",
    nestingLevelList: UU5.Environment.getNestingLevelList("bigBoxCollection", "box"),
    classNames: {
      main: props =>
        Cfg.CSS +
        "image-row" +
        " " +
        UU5.Common.Css.css`
        display: flex;
        ${getAlignmentStyle(props.alignment)}
      `
    },
    opt: {
      nestingLevelWrapper: true
    }
  },
  //@@viewOff:statics

  //@@viewOn:propTypes
  propTypes: {
    data: UU5.PropTypes.any,
    alignment: UU5.PropTypes.string,
    authenticate: UU5.PropTypes.bool
  },
  //@@viewOff:propTypes

  //@@viewOn:getDefaultProps
  getDefaultProps() {
    return {
      data: null,
      alignment: "block",
      authenticate: false
    };
  },
  //@@viewOff:getDefaultProps

  //@@viewOn:reactLifeCycle
  //@@viewOff:reactLifeCycle

  //@@viewOn:interface
  //@@viewOff:interface

  //@@viewOn:overridingMethods
  //@@viewOff:overridingMethods

  //@@viewOn:private
  _renderBody({ width, height }) {
    if (width === 0 && height === 0) {
      // fix for Resize rendering without dimensions first
      return null;
    } else {
      let data = this.props.data || [];
      let props = {};

      for (let propKey in bodyProps) {
        props[propKey] = this.props[propKey];
      }

      if (props.authenticate) {
        return (
          <UU5.Common.SessionContext.Consumer>
            {session => (
              <ImageRowBody {...props} rowWidth={width} data={data} session={session ? session.session : undefined} />
            )}
          </UU5.Common.SessionContext.Consumer>
        );
      } else {
        return <ImageRowBody {...props} data={data} rowWidth={width} />;
      }
    }
  },
  //@@viewOff:private

  //@@viewOn:render
  render() {
    return this.getNestingLevel() ? (
      <UU5.Bricks.Resize {...this.getMainPropsToPass()}>{this._renderBody}</UU5.Bricks.Resize>
    ) : null;
  }
  //@@viewOff:render
});

export default ImageRow;
