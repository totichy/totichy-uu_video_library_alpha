"use strict";

const Matcher = require("../matcher.js");
const ValidationResult = require("../validation-result.js");
const Validator = require("../validator.js");
const MatcherError = require("../matcher-error.js");

class _Array extends Matcher {

  constructor(...params) {
    super("array", ...params);
  }

  processParams(...params) {
    if (params.length > 0 && params.length <= 3) {
      let matcherOrValidator = params[0];
      if (matcherOrValidator instanceof Matcher) {
        this.typeMatchers = [matcherOrValidator];
      } else if (matcherOrValidator instanceof Validator) {
        this.typeMatchers = matcherOrValidator.matchers;
      } else {
        throw new MatcherError("Array: invalid parameter0, expected Matcher or Validator");
      }
      if (params.length === 2) {
        this.maxLength = params[1];
        if (this.maxLength != null && (typeof this.maxLength !== "number" || this.maxLength < 0)) {
          throw new MatcherError("Array: invalid parameter1, expected Number greater than or equal to 0");
        }
      } else {
        this.minLength = params[1];
        this.maxLength = params[2];
        if (this.minLength != null && (typeof this.minLength !== "number" || this.minLength < 0)) {
          throw new MatcherError("Array: invalid parameter1, expected Number greater than or equal to 0");
        }
        if (this.maxLength != null && (typeof this.maxLength !== "number" || this.maxLength < (this.minLength || 0))) {
          throw new MatcherError(`Array: invalid parameter2, expected Number greater than or equal to ${this.minLength || 0}`);
        }
      }
    } else if (params.length > 3) {
      throw new MatcherError("Array: wrong number of parameters, expected 0..3");
    }
  }

  match(value, ctx) {
    let result = new ValidationResult();
    if (value == undefined) {
      return result;
    }

    if (Array.isArray(value) || Object.prototype.toString.call(value) == "[object Array]") {
      if (this.typeMatchers) {
        let arrayCtx = { ...ctx };
        arrayCtx.parentValue = value;
        let index = 0;
        value.forEach(val => {
          this.typeMatchers.forEach(matcher => {
            let childResult = matcher.match(val, arrayCtx);
            result.addChildResult(index, childResult);
          });
          index += 1;
        });
        if (!result.valid) {
          result.addInvalidValueError("array.e002", `The value must be array of ${this.typeMatchers[0].getQualifiedName()}.`);
        }
      }
      if (this.maxLength != null && value.length > this.maxLength) {
        result.addInvalidValueError("array.e004", `The array size must not exceed ${this.maxLength} elements.`);
      }
      if (this.minLength != null && value.length < this.minLength) {
        result.addInvalidValueError("array.e003", `The array must have at least ${this.minLength} elements.`);
      }
    } else {
      result.addInvalidTypeError("array.e001", "The value must be array.");
    }

    return result;
  }

}

function ArrayMatcher(...params) {
  let matcher = new _Array(...params);
  if (this && this && this.matchers && this.matchers[0]) {
    this.matchers.push(matcher);
    return this;
  } else {
    let validator = new Validator(null);
    validator._loadMatchers();
    validator.matchers = [matcher];
    return validator;
  }
}

module.exports = ArrayMatcher;
