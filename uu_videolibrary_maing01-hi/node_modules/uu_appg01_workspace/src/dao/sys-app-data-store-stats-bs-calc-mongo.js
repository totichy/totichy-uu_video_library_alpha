const { DbConnection } = require("uu_appg01_datastore");

class SysAppDataStoreStatsBsCalcMongo {
  constructor(connectionString) {
    this.connectionString = connectionString;
    DbConnection.init(connectionString);
  }

  async calculate(awid, collectionName) {
    let db = await DbConnection.get(this.connectionString);
    let collectionInfo;

    collectionInfo = await db
      .collection(collectionName)
      .mapReduce(
        "function () {" +
          "emit(0, {" +
          "count: 1," +
          "size: Object.bsonsize(this)," +
          "fileIds: [this.fileId]" +
          "});" +
          "}",
        "function (_, infos) {" +
          "var count = 0;" +
          "var size = 0;" +
          "var fileIds = [];" +
          "infos.forEach(function (info) {" +
          "count += info.count;" +
          "size += info.size;" +
          "fileIds.push.apply(fileIds, info.fileIds);" +
          "});" +
          "return {" +
          "count: count," +
          "size: size," +
          "fileIds: fileIds" +
          "};" +
          "}",
        { out: { inline: 1 }, query: { awid } }
      );

    let objectStats;
    if (!collectionInfo[0]) {
      objectStats = { count: 0, size: 0, fileIds: [] };
    } else {
      objectStats = collectionInfo[0].value;
    }

    if (objectStats["count"] > 0) {
      let collStats;
      collStats = await db.command({ collStats: collectionName });

      let totalIndexSize = collStats["totalIndexSize"];
      let totalCount = collStats["count"];
      objectStats["size"] += (totalIndexSize / totalCount) * 2;

      let match = { _id: { $in: objectStats["fileIds"] } };
      let group = { _id: 0, size: { $sum: "$length" } };

      let res;

      res = await db
        .collection(`${collectionName}.files`)
        .aggregate([{ $match: match }, { $group: group }])
        .toArray();
      objectStats["size"] += res[0]["size"];
    }

    delete objectStats.fileIds;

    return objectStats;
  }
}

module.exports = SysAppDataStoreStatsBsCalcMongo;
