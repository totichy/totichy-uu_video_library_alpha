/*!
 * UAF Licence for the uu5 software.
 * 
 * Copyright (c) 2016-present, Unicorn a.s.
 * All rights reserved.
 * 
 * Definitions
 * -----------
 * This licence agreement is based on the original "BSD Licence" published by
 * the Regents of the University of California in 1990.
 * 
 * The term "Software" means the uu5 package, its modules, components,
 * all program files, source code, examples, media, and documentation which are part
 * of the Software package, as well as any portion of them. The term "Author" means
 * Unicorn a.s. and all its subsidiaries and/or affiliates.
 * 
 * Licence Agreement
 * -----------------
 * 
 * Redistribution and use of this Software in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 
 * 3. All derivative products containing user interface must display the following
 *    acknowledgement in the appropriate "About window" or website section accessible
 *    by all users of the product:
 * 
 *      This product includes following software developed by
 *      <a href="https://unicorn.com">Unicorn a.s.</a>:
 *      <a href="https://uuapp.plus4u.net/uu-bookkit-maing01/86b4d5a4a030400784764ebdb972bbda/book">UAF</a>,
 *      <a href="https://docs.plus4u.net/uaf/uuapp/uu5">uu5</a>.
 * 
 * 4. All derivative products must not block the default uu5 browser console message containing
 *    Software version information and copyright notice of the Author.
 * 
 * 5. The use of any portion of this Software is not allowed in the products
 *    that fully or partially resemble the functionality of the Software
 *    or otherwise compete with the Software unless they are licenced under the same licence
 *    conditions and provided free of charge. Specific prior written permission is required otherwise.
 * 
 * 6. Neither the name of the Author nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * 
 * Disclaimer
 * ----------
 * THIS SOFTWARE IS PROVIDED BY AUTHOR "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AUTHOR BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
(window["__webpack_jsonp_uu5richtextg01_1_14_1_uu5richtextg01"] = window["__webpack_jsonp_uu5richtextg01_1_14_1_uu5richtextg01"] || []).push([[1],{

/***/ 285:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Area", function() { return Area; });
/* harmony import */ var uu5g04__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var uu5g04__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(uu5g04__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var uu5g04_bricks__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);
/* harmony import */ var uu5g04_bricks__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(uu5g04_bricks__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(40);
/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(49);
/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(draft_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9);
/* harmony import */ var immutable__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(immutable__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(286);
/* harmony import */ var _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(48);
/* harmony import */ var _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(287);
/* harmony import */ var _editor_state_context_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(42);
/* harmony import */ var _area_less__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(288);
/* harmony import */ var _area_less__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_area_less__WEBPACK_IMPORTED_MODULE_9__);
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

//@@viewOn: revision
// coded: Martin Mach, 06.01.2021
// reviewed: Filip Janovsk√Ω: 12.01.2021
//@@viewOff:revision
//@@viewOn:imports









 //@@viewOff:imports

var MAX_DEPTH = 10;
var Area = uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.VisualComponent.create({
  //@@viewOn:mixins
  mixins: [uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.BaseMixin],
  //@@viewOff:mixins
  //@@viewOn:statics
  statics: {
    tagName: _config_js__WEBPACK_IMPORTED_MODULE_2__["default"].TAG + "Area",
    classNames: {
      main: _config_js__WEBPACK_IMPORTED_MODULE_2__["default"].CSS + "area"
    }
  },
  //@@viewOff:statics
  //@@viewOn:propTypes
  propTypes: {
    value: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.string,
    onChange: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.func,
    onBlur: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.func,
    onFocus: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.func,
    onPaste: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.func,
    readOnly: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.bool,
    handleKeyCommand: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.bool,
    getToolbar: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.func,
    placeholder: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.string,
    forceRenderModal: uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.PropTypes.bool
  },
  //@@viewOff:propTypes
  //@@viewOn:getDefaultProps
  getDefaultProps: function getDefaultProps() {
    return {
      value: "",
      onChange: null,
      onBlur: null,
      onFocus: null,
      onPaste: null,
      readOnly: undefined,
      handleKeyCommand: false,
      getToolbar: null,
      forceRenderModal: false
    };
  },
  //@@viewOff:getDefaultProps
  //@@viewOn:reactLifeCycle
  // rename editorState to data
  getInitialState: function getInitialState() {
    var _this = this;

    this._enterCommands = [{
      shiftKey: true,
      fn: this._handleLineBreaks
    }];
    this._tabCommands = [];
    this._otherCommands = [];
    return {
      editorState: this.props.value ? draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].createWithContent(draft_js__WEBPACK_IMPORTED_MODULE_3__["ContentState"].createFromText(this.props.value)) : draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].createEmpty(),
      readOnly: this.props.readOnly,
      customStyleMap: {},
      customStyleFns: [],
      blockRenderMap: draft_js__WEBPACK_IMPORTED_MODULE_3__["DefaultDraftBlockRenderMap"],
      getEditationFormMap: {},
      providerValue: {
        setEditorState: function setEditorState() {
          return _this.setEditorState.apply(_this, arguments);
        },
        modifyEditorState: function modifyEditorState() {
          return _this.modifyEditorState.apply(_this, arguments);
        },
        updateEditorState: function updateEditorState() {
          return _this.updateEditorState.apply(_this, arguments);
        },
        getEditorState: function getEditorState() {
          return _this.getEditorState.apply(_this, arguments);
        },
        createEntity: function createEntity() {
          return _this.createEntity.apply(_this, arguments);
        },
        Entity: _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"],
        Selection: _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"],
        Style: _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"]
      }
    };
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.readOnly !== undefined && nextProps.readOnly !== this.props.readOnly) {
      this.setState({
        readOnly: nextProps.readOnly
      });
    }
  },
  componentDidMount: function componentDidMount() {
    this._updateStyles();
  },
  componentDidUpdate: function componentDidUpdate() {
    this._updateStyles();
  },
  //@@viewOff:reactLifeCycle
  //@@viewOn:interface
  setEditorState: function setEditorState(editorState) {
    var _this2 = this;

    var focus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var setStateCallback = arguments.length > 2 ? arguments[2] : undefined;

    if (!editorState) {
      editorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].createEmpty();
    }

    this._editorState = editorState;
    var newState = {
      editorState: editorState
    }; // editorState may contain unknown inline styles, parse them and update customStyleMap if there is some unknown inline style with correct format

    var customStyleMap = this._updateCustomStyleMap(editorState);

    if (customStyleMap) {
      newState.customStyleMap = customStyleMap;
    }

    this._handleChangeState(newState, function () {
      _this2._editorState = undefined;

      if (typeof setStateCallback === "function") {
        setStateCallback();
      }
    }, focus);

    return this;
  },
  modifyEditorState: function modifyEditorState(editorState, updateObj, historyLog) {
    var currentContent = updateObj.currentContent,
        otherUpdates = _objectWithoutProperties(updateObj, ["currentContent"]);

    var newEditorState = editorState;

    if (otherUpdates) {
      newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].set(newEditorState, otherUpdates);
    }

    if (currentContent) {
      if (historyLog) {
        // save previous content to History
        newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].push(newEditorState, currentContent, historyLog);
      } else {
        // modify editorState without save to history
        newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].set(newEditorState, {
          currentContent: currentContent
        });
      }
    }

    return newEditorState;
  },
  updateEditorState: function updateEditorState(editorState, updateObj, focus, setStateCallback) {
    return this.setEditorState(draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].set(editorState, updateObj), focus, setStateCallback);
  },
  getEditorState: function getEditorState() {
    return this._editorState || this.state.editorState;
  },
  setReadOnly: function setReadOnly() {
    var readOnly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var setStateCallback = arguments.length > 1 ? arguments[1] : undefined;
    this.setState({
      readOnly: readOnly
    }, setStateCallback);
    return this;
  },
  isReadOnly: function isReadOnly() {
    return this.state.readOnly;
  },
  addInlineStyle: function addInlineStyle(name, style) {
    this.setState(function (state) {
      // handle styles defined as a function
      if (typeof style === "function") {
        // check if style is not already exist
        if (state.customStyleFns.find(function (item) {
          return item.name === name;
        })) {
          return;
        }

        return {
          customStyleFns: [].concat(_toConsumableArray(state.customStyleFns), [{
            name: name,
            style: style
          }])
        };
      } // check if someone tries to change existing style


      if (state.customStyleMap && state.customStyleMap[name]) {
        return;
      }

      var newStyleMap = state.customStyleMap ? JSON.parse(JSON.stringify(state.customStyleMap)) : {};
      newStyleMap[name] = style;
      return {
        customStyleMap: newStyleMap
      };
    });
    return this;
  },
  setCustomStyleMap: function setCustomStyleMap(customStyleMap) {
    var styleMap = {};
    var styleFns = [];

    for (var name in customStyleMap) {
      var style = customStyleMap[name];

      if (typeof style === "function") {
        styleFns.push({
          name: name,
          style: style
        });
      } else {
        styleMap[name] = style;
      }
    }

    this.setState({
      customStyleMap: styleMap,
      customStyleFns: styleFns
    });
    return this;
  },
  setBlockRenderMap: function setBlockRenderMap(blockRenderMap) {
    // keep support for other draft default block types and add our myCustomBlock type
    this.setState({
      blockRenderMap: this._createBlockRenderMap(blockRenderMap)
    });
    return this;
  },
  setBlockRendererFn: function setBlockRendererFn(blockRendererFn) {
    this.setState({
      blockRendererFn: blockRendererFn
    });
    return this;
  },
  setDecorators: function setDecorators(decorators) {
    this.setState({
      editorState: this._createEditorStateWithDecorators(decorators)
    });
    return this;
  },
  set: function set(config) {
    var _this3 = this;

    var newState = {}; // process blockRendererFn

    if (config.blockRendererFn) {
      newState.blockRendererFn = config.blockRendererFn;
    } // process blockRenderMap


    if (config.blockRenderMap) {
      newState.blockRenderMap = this._createBlockRenderMap(config.blockRenderMap);
    } // customStyleMap


    if (config.customStyleMap) {
      var styleMap = {};
      var styleFns = [];

      for (var name in config.customStyleMap) {
        var style = config.customStyleMap[name];

        if (typeof style === "function") {
          styleFns.push({
            name: name,
            style: style
          });
        } else {
          styleMap[name] = style;
        }
      }

      newState.customStyleMap = styleMap;
      newState.customStyleFns = styleFns;
    } // getEditationFormMap - map of functions that returns editation form


    if (config.getEditationFormMap) {
      newState.getEditationFormMap = config.getEditationFormMap;
    } // process editorState and decorators


    if (config.editorState) {
      // dont process decorators - editor state contains information about decorators
      newState.editorState = config.editorState; // update customStyleMap - only if editor state was set

      var updatedStyleMap = this._updateCustomStyleMap(newState.editorState, newState.customStyleMap || this.state.customStyleMap);

      if (updatedStyleMap) {
        newState.customStyleMap = updatedStyleMap;
      }
    } else if (config.decorators) {
      newState.editorState = this._createEditorStateWithDecorators(config.decorators);
    } // empty commands


    this._enterCommands = [{
      shiftKey: true,
      fn: this._handleLineBreaks
    }];
    this._entityOptions = config.entityOptions; // error plugin does not send its options by this config - only decorator so we add it manually

    this._entityOptions.error = {
      preserveEnters: true
    };
    this._otherCommands = [];
    this._tabCommands = [];

    if (config.commands) {
      config.commands.forEach(function (command) {
        if (command.keyCode === 13) {
          _this3._enterCommands.push(command);
        } else if (command.keyCode === 9) {
          _this3._tabCommands.push(command);
        } else {
          _this3._otherCommands.push(_objectSpread(_objectSpread({}, command), {}, {
            code: "cmd_" + _this3._otherCommands.length
          }));
        }
      });
    }

    this.setState(newState);
    return this;
  },
  toggleInlineStyle: function toggleInlineStyle(inlineStyle, preserveStyle, focus) {
    var state = {
      editorState: _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleInline(this.getEditorState(), inlineStyle, preserveStyle)
    };
    var callback;

    if (focus) {
      callback = this.focus;
    } // check if inline style is defined
    // if doesn't try to parse style from its string representation


    if (!this.state.customStyleMap[inlineStyle]) {
      var styleParts = inlineStyle.match(/^[^.]+\.([^:]+):(.*)$/);

      if (styleParts) {
        var customStyleMap = JSON.parse(JSON.stringify(this.state.customStyleMap));
        var style = {};
        style[styleParts[1]] = styleParts[2];
        customStyleMap[inlineStyle] = style;
        state.customStyleMap = customStyleMap;
      }
    }

    this._handleChangeState(state, callback);

    return this;
  },
  toggleBlockStyle: function toggleBlockStyle(blockStyles, setStateCallback) {
    this._updateEditorStateByFn(setStateCallback, _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleSelectedBlocksStyles, blockStyles);

    return this;
  },
  toggleBlockType: function toggleBlockType(blockType, setStateCallback) {
    this._updateEditorStateByFn(setStateCallback, _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleBlock, blockType);

    return this;
  },
  editSelectedComponent: function editSelectedComponent(entityName, button, aroundElement, setStateCallback) {
    // check if some editation is already in propgress
    if (this._openedDialogParams) {
      var onlyCloseDialog = this._openedDialogParams.entityName === entityName;

      this._closeDialog(true); // if is started editation of the same component - only close dialog


      if (onlyCloseDialog) {
        return;
      }
    } // find selected entity - startOffset is inside entity


    var editorState = this.getEditorState();
    var entityKey = _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].getCurrentEntityKey(editorState);
    var entity = entityKey ? _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].getEntityByKey(editorState, entityKey) : null;
    var getEditationForm = this.state.getEditationFormMap[entityName]; // check if selected entity is the one we want to edit

    if (entity && entity.getType() === entityName) {
      // update selection to select whole entity - need to get text of entity
      var newEditorState = _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].selectEntity(editorState, entityKey);
      var data = entity.getData(); // show eidtation form

      newEditorState = this._showComponentForm(newEditorState, entityName, button, aroundElement, getEditationForm, data, true, setStateCallback) || newEditorState;
      this.setEditorState(newEditorState);
    } else {
      // show editation form
      this._showComponentForm(editorState, entityName, button, aroundElement, getEditationForm, undefined, false, setStateCallback);
    }
  },
  createEntity: function createEntity(editorState, setStateCallback, entityName) {
    var _this4 = this;

    var text = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "\u200B";
    var data = arguments.length > 4 ? arguments[4] : undefined;
    var opts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    var entityKey = _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].create(editorState, entityName, opts.isMutable, data); // get list of style on current entity - replace of text will remove them

    var styleList = _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].getAllStyleNamesFromSelection(editorState); // remove entity from selection at first otherwise toggleLink will only remove entity and do not create new one

    var newEditorState = _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].removeEntityFromSelection(editorState, editorState.getSelection()); // update inline component

    newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["RichUtils"].toggleLink(editorState, editorState.getSelection(), entityKey); // replace text of selection

    if (text !== null) {
      var content = draft_js__WEBPACK_IMPORTED_MODULE_3__["Modifier"].replaceText(newEditorState.getCurrentContent(), newEditorState.getSelection(), text, undefined, entityKey); // create temporary editor state to set back all removed styles

      var tempEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].push(newEditorState, content, "create entity");
      tempEditorState = _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].selectEntity(tempEditorState, entityKey); // return inline styles - replace text removed them

      styleList.forEach(function (style) {
        return tempEditorState = _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleInline(tempEditorState, style, true);
      }); // update editor content

      newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].push(newEditorState, tempEditorState.getCurrentContent(), "create entity");
    }

    if (opts.preserveCurrentState) {
      return newEditorState;
    } // update selection - set selection after component and update state


    if (!opts.preserveSelection) {
      _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].moveSelectionAfterEntity(newEditorState, entityKey, function (editorState) {
        return _this4.setEditorState(editorState, undefined, setStateCallback);
      });
    } else {
      this.setEditorState(newEditorState, undefined, setStateCallback);
    }
  },
  focus: function focus() {
    var _this5 = this;

    if (this.state.readOnly) {
      // prevent focusing readonly instance of editor
      return;
    }

    var editorState = this.getEditorState();
    var newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].set(editorState, {
      selection: editorState.getSelection().set("hasFocus", true),
      forceSelection: true,
      nativelyRenderedContent: null
    });
    this.setEditorState(newEditorState, false, function () {
      if (typeof _this5.props.onFocus === "function") {
        _this5.props.onFocus();
      }
    });
    return;
  },
  getStyles: function getStyles() {
    return this._styles;
  },
  // API for work with entity
  selectCurrentEntity: function selectCurrentEntity(editorState, entityName) {
    return _bricks_entity_js__WEBPACK_IMPORTED_MODULE_5__["default"].selectCurrentEntity(editorState, entityName);
  },
  // API for work with styles
  toggleBlockStyles: function toggleBlockStyles(editorState, block, blockStyle, toggleFn) {
    return _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleBlockStyles(editorState, block, blockStyle, toggleFn);
  },
  toggleSelectedBlocksStyles: function toggleSelectedBlocksStyles(editorState, blockStyle, toggleFn) {
    return _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleSelectedBlocksStyles(editorState, blockStyle, toggleFn);
  },
  getCurrentStylesWithPrefix: function getCurrentStylesWithPrefix(editorState, prefix) {
    return _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].getCurrentStylesWithPrefix(editorState, prefix);
  },
  toggleBlock: function toggleBlock(editorState, blockType) {
    return _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].toggleBlock(editorState, blockType);
  },
  removeInlineStyle: function removeInlineStyle(editorState, inlineStyle) {
    return _bricks_style_js__WEBPACK_IMPORTED_MODULE_7__["default"].removeInline(editorState, inlineStyle);
  },
  // API fro work with Selection
  updateSelection: function updateSelection(editorState, update) {
    return _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].updateSelection(editorState, update);
  },
  updateSelectedBlocks: function updateSelectedBlocks(editorState, update) {
    return _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].updateSelectedBlocks(editorState, update);
  },
  //@@viewOff:interface
  //@@viewOn:overriding
  //@@viewOff:overriding
  //@@viewOn:private
  _updateEditorStateByFn: function _updateEditorStateByFn(setStateCallback, fn) {
    var _this6 = this;

    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      params[_key - 2] = arguments[_key];
    }

    this.setState(function (state) {
      var newEditorState = fn.apply(void 0, [state.editorState].concat(params));

      if (newEditorState) {
        _this6._notifyOnChange(newEditorState);

        return {
          editorState: newEditorState
        };
      }
    }, setStateCallback);
  },
  _notifyOnChange: function _notifyOnChange(editorState) {
    // update toolbar
    if (typeof this.props.getToolbar === "function") {
      var toolbar = this.props.getToolbar();

      if (toolbar) {
        toolbar.update(editorState);
      }
    }
  },
  _onChange: function _onChange(editorState, setStateCallback, focusEditor) {
    this._handleChangeState({
      editorState: editorState
    }, setStateCallback, focusEditor);
  },
  _handleChangeState: function _handleChangeState(state, setStateCallback, focusEditor) {
    var _this7 = this;

    // call onChange props function
    if (typeof this.props.onChange === "function") {
      state.editorState = this.props.onChange(this, state.editorState) || state.editorState;
    }

    this.setState(state, function () {
      _this7._notifyOnChange(_this7.state.editorState);

      if (focusEditor && !_this7.state.readOnly) {
        _this7._editor.focus();
      }

      return typeof setStateCallback === "function" && setStateCallback();
    });
  },
  _handleTab: function _handleTab(event) {
    var editorState = this.getEditorState(); // call all commands

    for (var i = 0; i < this._tabCommands.length; i++) {
      var command = this._tabCommands[i];

      if ((command.shiftKey || false) === event.shiftKey && (command.ctrlKey || false) === event.ctrlKey && (command.altKey || false) === event.altKey) {
        var result = command.fn(editorState, this);

        if (result) {
          // command was handled -> prevent default behavior
          event.stopPropagation();
          event.preventDefault();
          return result;
        }
      }
    }

    var newEditorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["RichUtils"].onTab(event, editorState, MAX_DEPTH);

    if (newEditorState !== editorState) {
      this.setEditorState(newEditorState);
    }
  },
  _handleKeyCommand: function _handleKeyCommand(command) {
    // run default key commands
    var editorState = draft_js__WEBPACK_IMPORTED_MODULE_3__["RichUtils"].handleKeyCommand(this.getEditorState(), command); // RichUtils.handleKeyCommand returns null as a result for Enter key

    if (editorState && editorState !== this.getEditorState()) {
      // update editorState and mark command as handled
      this.setEditorState(editorState);
      return "handled";
    } else {
      // apply custom commands
      for (var i = 0; i < this._otherCommands.length; i++) {
        var cmd = this._otherCommands[i];

        if (cmd.code === command) {
          editorState = cmd.fn(this.getEditorState(), this);

          if (editorState) {
            if (_typeof(editorState) === "object") {
              this.setEditorState(editorState);
            }

            return "handled";
          }
        }
      }
    }

    return "not-handled";
  },
  _handleReturn: function _handleReturn(event, editorState) {
    // call all commands
    for (var i = 0; i < this._enterCommands.length; i++) {
      var command = this._enterCommands[i];

      if ((command.shiftKey || false) === event.shiftKey && (command.ctrlKey || false) === event.ctrlKey && (command.altKey || false) === event.altKey) {
        var result = command.fn(editorState, this);

        if (result) {
          event.stopPropagation();
          event.preventDefault();
          return result;
        }
      }
    }

    if (event.shiftKey) {
      this._onChange(draft_js__WEBPACK_IMPORTED_MODULE_3__["RichUtils"].insertSoftNewline(editorState));

      return true;
    }

    return false;
  },
  _handleLineBreaks: function _handleLineBreaks(editorState, area) {
    // for shift + enter manually insert line break to prevent breaking entity into two parts
    // find entity and check if enter is pressed inside uu5string
    var selection = editorState.getSelection();
    var content = editorState.getCurrentContent();
    var block = content.getBlockForKey(selection.getStartKey());
    var entityKey = block.getEntityAt(selection.getEndOffset());

    if (entityKey) {
      var entity = content.getEntity(entityKey);

      var entityOptions = this._entityOptions[entity.getType()];

      if (entityOptions && entityOptions.preserveEnters) {
        // add \n char into text and move cursor after that character
        area.setEditorState(_bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].insertText(editorState, "\n"));
        return true;
      }
    }

    return false;
  },
  _registerEditor: function _registerEditor(editor) {
    this._editor = editor;
  },
  _createEditorStateWithDecorators: function _createEditorStateWithDecorators(decorators) {
    var editorContent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getEditorState().getCurrentContent();
    var compositeDecorators = new draft_js__WEBPACK_IMPORTED_MODULE_3__["CompositeDecorator"](decorators);
    return draft_js__WEBPACK_IMPORTED_MODULE_3__["EditorState"].createWithContent(editorContent, compositeDecorators);
  },
  _createBlockRenderMap: function _createBlockRenderMap(blockRenderMap) {
    return blockRenderMap ? immutable__WEBPACK_IMPORTED_MODULE_4___default.a.Map(blockRenderMap) : draft_js__WEBPACK_IMPORTED_MODULE_3__["DefaultDraftBlockRenderMap"];
  },
  // component editation
  _showComponentForm: function _showComponentForm(editorState, entityName, button, aroundElement, getEditationForm) {
    var _this8 = this;

    var data = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
    var isEdit = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
    var setStateCallback = arguments.length > 7 ? arguments[7] : undefined;

    // handle non existing element - show form around selection
    if (!aroundElement) {
      // use native selection API to find selected node
      var selection = getSelection();
      var selectedNode = selection.anchorNode || selection.focusNode;

      while (selectedNode.nodeType !== 1) {
        selectedNode = selectedNode.parentNode;
      }

      aroundElement = selectedNode;
    } // get content for modal from plugin


    var text = _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].getSelectedText(editorState);

    if (typeof getEditationForm === "function") {
      var formDef = getEditationForm(entityName, text, data, function () {
        for (var _len2 = arguments.length, props = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          props[_key2] = arguments[_key2];
        }

        _this8._addComponent.apply(_this8, [editorState, setStateCallback].concat(props)); // close modal


        _this8._closeDialog();
      }, function () {
        _this8._closeDialog();
      }, isEdit);

      this._openDialog(formDef, button, aroundElement, entityName);
    } else {
      if (isEdit) {
        // selection is inside existing entity => remove entity
        return _bricks_selection_js__WEBPACK_IMPORTED_MODULE_6__["default"].removeEntityFromSelection(editorState, editorState.getSelection());
      } else {
        this._addComponent(editorState, setStateCallback, entityName, text, data, {
          preserveSelection: true
        });
      }
    }
  },
  _addComponent: function _addComponent(editorState, setStateCallback, entityName, text, data, opts) {
    // update entity by new data
    this.createEntity(editorState, setStateCallback, entityName, text, data, opts);
  },
  _registerModal: function _registerModal(modal) {
    this._modal = modal;
  },
  _registerPopover: function _registerPopover(popover) {
    this._popover = popover;
  },
  _openDialog: function _openDialog(opts, button, aroundElement, entityName) {
    var _this9 = this;

    // close opened dialog
    if (this._openedDialogParams) {
      this._closeDialog(true);
    }

    this._openedDialogParams = {
      opts: opts,
      button: button,
      aroundElement: aroundElement,
      entityName: entityName
    }; // open new dialog

    this.setReadOnly(true, function () {
      var isPopover = opts.isPopover,
          dialogType = opts.dialogType,
          props = _objectWithoutProperties(opts, ["isPopover", "dialogType"]);

      isPopover = dialogType === undefined ? isPopover : dialogType === "popover";
      var isHidden = dialogType === "hidden";

      if (isPopover) {
        if (button && typeof button.press === "function") {
          button.press();
        }

        if (props.onClose) {
          props.onClose = function () {
            props.onClose.apply(props, arguments);

            _this9._onClosePopover.apply(_this9, arguments);
          };
        }

        _this9._popover.open(_objectSpread({
          onClose: _this9._onClosePopover,
          aroundElement: aroundElement,
          position: "bottom",
          offset: 4
        }, props));
      } else if (isHidden) {
        _this9.setState({
          hiddenContent: props.content
        });
      } else {
        _this9._modal.open(props);
      }
    });
  },
  _closeDialog: function _closeDialog(preventStateChange) {
    if (!this._openedDialogParams) return; // no opened dialog registered

    var isPopover = this._openedDialogParams.opts.dialogType === undefined ? this._openedDialogParams.opts.isPopover : this._openedDialogParams.opts.dialogType === "popover";
    var isHidden = this._openedDialogParams.opts.dialogType === "hidden";

    if (isHidden) {
      this._closeHidden();
    } else {
      isPopover ? this._closePopover() : this._closeModal(preventStateChange);
    }
  },
  _closeHidden: function _closeHidden() {
    var _this10 = this;

    this.setReadOnly(false, function () {
      _this10.setState({
        hiddenContent: null
      }, _this10.focus);
    });
    delete this._openedDialogParams;
  },
  _closeModalAndEnableEditor: function _closeModalAndEnableEditor() {
    this._closeModal();
  },
  _closeModal: function _closeModal(preventStateChange) {
    var _this11 = this;

    if (preventStateChange) {
      this._modal.close(false);
    } else {
      this.setReadOnly(false, function () {
        _this11._modal.close(false);

        _this11.focus();
      });
    }

    delete this._openedDialogParams;
  },
  _closePopover: function _closePopover() {
    var _this12 = this;

    this.setReadOnly(false, function () {
      _this12._popover.close();

      _this12._onClosePopover(true);

      _this12.focus();
    });
  },
  _onClosePopover: function _onClosePopover(preventStateChange) {
    if (!this._openedDialogParams) return; // no opened dialog registered
    // enable editor

    if (!preventStateChange) {
      this.setReadOnly(false);
    }

    if (this._openedDialogParams.button && typeof this._openedDialogParams.button.pressUp === "function") {
      this._openedDialogParams.button.pressUp();
    }

    delete this._openedDialogParams;
  },
  _updateCustomStyleMap: function _updateCustomStyleMap() {
    var editorState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.state.editorState;
    var customStyleMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.customStyleMap;
    var raw = Object(draft_js__WEBPACK_IMPORTED_MODULE_3__["convertToRaw"])(editorState.getCurrentContent());
    var updated = false;

    for (var i = 0; i < raw.blocks.length; i++) {
      var block = raw.blocks[i];

      if (block.inlineStyleRanges) {
        for (var styleIndex = 0; styleIndex < block.inlineStyleRanges.length; styleIndex++) {
          var styleName = block.inlineStyleRanges[styleIndex].style; // check if style is already in styleMap

          if (!customStyleMap[styleName]) {
            // try to parse style
            var postfix = styleName.match(/^[^.]+\.(.*)$/);
            if (!postfix) continue;
            var parts = postfix[1].split(";");
            var styleDefinition = {};

            for (var partIndex = 0; partIndex < parts.length; partIndex++) {
              var styleParts = parts[partIndex].match(/^([^:]+):(.+)$/); // let styleParts = styleName.match(/^[^.]+\.([^:]+):(.*)$/);

              if (styleParts) {
                // add style into styleMap
                if (!updated) {
                  updated = true; // clone customStyleMap - only first time

                  customStyleMap = JSON.parse(JSON.stringify(customStyleMap));
                }

                styleDefinition[styleParts[1]] = styleParts[2];
              }
            } // update style map


            if (Object.keys(styleDefinition).length) {
              customStyleMap[styleName] = styleDefinition;
            }
          }
        }
      }
    }

    if (updated) {
      return customStyleMap;
    }
  },
  _keyBindingFn: function _keyBindingFn(e) {
    var _this13 = this;

    if (draft_js__WEBPACK_IMPORTED_MODULE_3__["KeyBindingUtil"].hasCommandModifier(e) || e.altKey) {
      for (var i = 0; i < this._otherCommands.length; i++) {
        var cmd = this._otherCommands[i];
        if (cmd.altKey && !e.altKey) continue;
        if (cmd.keyCode !== e.which) continue;
        if (cmd.ctrlKey && !draft_js__WEBPACK_IMPORTED_MODULE_3__["KeyBindingUtil"].hasCommandModifier(e)) continue;
        return cmd.code;
      } // handle CTRL/CMD + X to to fix default Draft's behavior


      if (e.keyCode === 88
      /* X key */
      ) {
          // draft reads scroll position from our inner scrollbar and after cut of text draft updates scroll position on parent scrollbar
          // to disable this behavior we need to temporary overwrite method restoreEditorDOM to remove input paramter scrollPosition
          var fn = this._editor.restoreEditorDOM;

          this._editor.restoreEditorDOM = function () {
            _this13._editor.restoreEditorDOM = fn;

            _this13._editor.restoreEditorDOM();
          };

          return null; // let process standart cut operation by draft
        } // block key for command "code" - creates code block
      // we want to allow only inline formatting - bold, italic, underline


      if (e.keyCode === 74
      /* J key */
      ) {
          return null;
        }
    }

    return Object(draft_js__WEBPACK_IMPORTED_MODULE_3__["getDefaultKeyBinding"])(e);
  },
  _handlePaste: function _handlePaste(text, html, editorState) {
    if (typeof this.props.onPaste === "function") {
      return this.props.onPaste(text, html, editorState);
    }

    return false; // not handled
  },
  _showPlaceholder: function _showPlaceholder() {
    var editorState = this.getEditorState();
    var content = editorState.getCurrentContent();
    var blocks = content.getBlocksAsArray();

    if (blocks.length === 1 && blocks[0].getType() === "unstyled" && !blocks[0].getText()) {
      return this.props.placeholder;
    }
  },
  _updateStyles: function _updateStyles() {
    // eslint-disable-next-line react/no-find-dom-node
    this._styles = getComputedStyle(this.findDOMNode());
  },
  _customStyleFn: function _customStyleFn(styleSet, block) {
    var _this14 = this;

    var styleObj = {};
    var result = {};
    styleSet.forEach(function (item) {
      var style = _this14.state.customStyleMap[item];

      if (style) {
        styleObj = _objectSpread(_objectSpread({}, styleObj), style);
      }
    });

    for (var i = 0; i < this.state.customStyleFns.length; i++) {
      var styleFn = this.state.customStyleFns[i];

      if (styleSet.get(styleFn.name)) {
        var res = styleFn.style(styleObj, block);

        if (res) {
          result = _objectSpread(_objectSpread({}, result), res);
          styleObj = _objectSpread(_objectSpread({}, styleObj), res);
        }
      }
    }

    return result;
  },
  //@@viewOff:private
  //@@viewOn:render
  render: function render() {
    return uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.Element.create(_editor_state_context_js__WEBPACK_IMPORTED_MODULE_8__["default"].Provider, {
      value: this.state.providerValue
    }, uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.Element.create(draft_js__WEBPACK_IMPORTED_MODULE_3__["Editor"], _extends({
      ref: this._registerEditor
    }, this.getMainAttrs(), {
      placeholder: this._showPlaceholder(),
      readOnly: this.isReadOnly(),
      editorState: this.getEditorState(),
      onChange: this._onChange,
      onTab: this._handleTab,
      customStyleMap: this.state.customStyleMap,
      customStyleFn: this._customStyleFn,
      blockRendererFn: this.state.blockRendererFn,
      blockRenderMap: this.state.blockRenderMap,
      keyBindingFn: this.props.handleKeyCommand ? this._keyBindingFn : undefined,
      handleKeyCommand: this.props.handleKeyCommand ? this._handleKeyCommand : undefined,
      onBlur: this.props.onBlur,
      onFocus: this.props.onFocus,
      handlePastedText: this._handlePaste,
      handleReturn: this._handleReturn
    })), uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.Element.create(uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Bricks.PortalModal, {
      ref_: this._registerModal,
      onClose: this._closeModalAndEnableEditor,
      forceRender: this.props.forceRenderModal
    }), uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.Element.create(uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Bricks.PortalPopover, {
      ref: this._registerPopover
    }), uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Common.Element.create(uu5g04__WEBPACK_IMPORTED_MODULE_0___default.a.Bricks.Div, {
      hidden: true,
      key: "hiddenArea"
    }, this.state.hiddenContent));
  } //@@viewOff:render

});
/* harmony default export */ __webpack_exports__["default"] = (Area);

/***/ }),

/***/ 286:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var draft_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(draft_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _selection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(48);
/* harmony import */ var uu5g04__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var uu5g04__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(uu5g04__WEBPACK_IMPORTED_MODULE_2__);



var Entity = {
  getDefaultStrategy: function getDefaultStrategy(entityName) {
    return function (contentBlock, callback, content) {
      contentBlock.findEntityRanges(function (character) {
        var entityKey = character.getEntity();
        return entityKey !== null && content.getEntity(entityKey).getType() === entityName;
      }, callback);
    };
  },
  getDefaultEntityForm: function getDefaultEntityForm(_ref) {
    var tag = _ref.tag,
        props = _ref.props,
        _onSave = _ref.onSave,
        _onCancel = _ref.onCancel,
        text = _ref.text;
    return uu5g04__WEBPACK_IMPORTED_MODULE_2__["Common"].UU5String.toChildren("<uu5string />\n      <UU5.Forms.Form onSave=\"${onSave}\" onCancel=\"${onCancel}\">\n      <UU5.Forms.Text label=\"Tag name\" name=\"tag\" value=\"${tag}\" disabled />\n      <UU5.CodeKit.JsonEditor label=\"Props\" name=\"props\" ".concat(props ? 'value="${props}"' : "", " />\n      <UU5.Forms.Text label=\"content\" name=\"text\" ").concat(text ? 'value="${text}"' : "", " />\n      <UU5.Forms.Controls /></UU5.Forms.Form>"), {
      onSave: function onSave() {
        return _onSave;
      },
      onCancel: function onCancel() {
        return _onCancel;
      },
      tag: tag,
      props: JSON.stringify(props || {}),
      text: text
    });
  },
  getCurrentEntityKey: function getCurrentEntityKey(editorState) {
    var selection = editorState.getSelection();
    var content = editorState.getCurrentContent();
    var blockKey = selection.getStartKey();
    var block = content.getBlockForKey(blockKey);
    return block.getEntityAt(selection.getStartOffset());
  },
  getEntityByKey: function getEntityByKey(editorState, entityKey) {
    return editorState.getCurrentContent().getEntity(entityKey);
  },
  getCurrentEntity: function getCurrentEntity(editorState) {
    var entityKey = Entity.getCurrentEntityKey(editorState);
    return entityKey && Entity.getEntityByKey(editorState, entityKey);
  },
  selectEntity: function selectEntity(editorState, entityKey) {
    var newEditorState = editorState;
    var selection = editorState.getSelection();
    var content = editorState.getCurrentContent();
    var blockKey = selection.getStartKey();
    var block = content.getBlockForKey(blockKey); // update selection - select whole component

    block.findEntityRanges(function (character) {
      return character.getEntity() === entityKey;
    }, function (startOffset, endOffset) {
      newEditorState = _selection_js__WEBPACK_IMPORTED_MODULE_1__["default"].updateSelection(editorState, {
        startOffset: startOffset,
        endOffset: endOffset
      });
    });
    return newEditorState;
  },
  selectCurrentEntity: function selectCurrentEntity(editorState, entityName) {
    var selection = editorState.getSelection();
    var content = editorState.getCurrentContent();
    var block = content.getBlockForKey(selection.getAnchorKey());
    var entityKey = block.getEntityAt(selection.getStartOffset());
    var entity = entityKey && content.getEntity(entityKey);

    if (entity && entity.getType() === entityName) {
      // update selection over whole entity
      return Entity.selectEntity(editorState, entityKey);
    }

    return editorState;
  },
  toggle: function toggle(editorState, entityName, props, data) {
    var content = editorState.getCurrentContent();
    content.createEntity(entityName, "MUTABLE", {
      props: props,
      data: data
    });
    var compKey = content.getLastCreatedEntityKey(); // update inline component

    editorState = draft_js__WEBPACK_IMPORTED_MODULE_0__["RichUtils"].toggleLink(editorState, editorState.getSelection(), compKey);
  },
  remove: function remove(editorState) {
    return editorState;
  },
  create: function create(editorState, entityName) {
    var isMutable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    var data = arguments.length > 3 ? arguments[3] : undefined;
    var content = editorState.getCurrentContent();
    content.createEntity(entityName, isMutable ? "MUTABLE" : "IMMUTABLE", data);
    return content.getLastCreatedEntityKey();
  }
};
/* harmony default export */ __webpack_exports__["default"] = (Entity);

/***/ }),

/***/ 288:
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(289);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":false}

options.transform = transform
options.insertInto = function anonymous(
) {
return __webpack_require__(16)();
};

var update = __webpack_require__(17)(content, options);

if(content.locals) module.exports = content.locals;



/***/ }),

/***/ 289:
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(15);
exports = ___CSS_LOADER_API_IMPORT___(false);
// Module
exports.push([module.i, "/* Following variables are available to uuApps / libraries using uu5g04 library.\n   This file can be imported using:\n    import \"~uu5g04/dist/tools.less\";\n*/\n/***************** FLEX start *****************/\n/* @deprecated */\n/***************** FLEX end *****************/\n/***************** ANIMATIONS start *****************/\n/* @deprecated */\n/***************** ANIMATIONS end *****************/\n/***************** LAYOUT start *****************/\n/* @deprecated */\n/***************** LAYOUT end *****************/\n.uu5-common-temp-textarea {\n  opacity: 0;\n  position: absolute;\n  left: -1000px;\n  top: -1000px;\n}\n.public-DraftEditor-content {\n  min-height: 72px;\n  padding: 6px 8px 7px;\n  background: #fff;\n  border: 1px solid #BDBDBD;\n  border-radius: 2px;\n}\n.public-DraftEditor-content:focus {\n  border-color: #2196F3;\n  box-shadow: none;\n  outline: none;\n}\n.public-DraftEditor-content a,\n.public-DraftEditor-content button {\n  pointer-events: none;\n}\n.DraftEditor-root {\n  position: relative;\n}\n.public-DraftEditorPlaceholder-root {\n  position: absolute;\n  left: 0;\n  right: 0;\n  pointer-events: none;\n  color: #A8A8A8;\n  padding-left: 8px;\n  padding-top: 8px;\n  padding-right: 8px;\n}\n/* hide first and last help space in the block */\n.public-DraftStyleDefault-block > span[style*=\"display: none;\"]:first-child,\n.public-DraftStyleDefault-block > span[style*=\"display: none;\"]:last-child {\n  display: inline !important;\n}\n.public-DraftStyleDefault-block > span[style*=\"display: none;\"]:only-child,\n.DraftEditor-editorContainer [data-block]:not(:only-child) .public-DraftStyleDefault-block > span[style*=\"display:;\"]:only-child {\n  display: none !important;\n}\n", ""]);
// Exports
module.exports = exports;


/***/ })

}]);